'use strict'
// //-----------------------modul 4-----------------
// const users = ['Greengo', 'Riki', 'Floyd', 'Marchellos'];
// let userIndex;
  
// // –ù–∞–ø–∏—Å–∞—Ç—å —Ü—ã–∫–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ –∑–∞ –∏–º–µ–Ω–µ–º. –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º Riki –∏
// // —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –∏–Ω–¥–µ–∫—Å –≤ userIndex;
// // for(let input of users) {
// //   if (input === 'Riki') {
// //     userIndex = users.indexOf(input);
// //   }
// // }
// // console.log(userIndex)

// let ask = 'aaa';

// // for (let user of users){
//   //   let hasUser;
//   //   console.log(hasUser);
//   //   if (ask === user) {
//     //     hasUser = true;
//     //   };
//     //   if (hasUser === true) {
//       //     alert ('This user has allready created');
//       //     console.log (hasUser);
//       //   }else {
//         //     users.push(ask);
//         //   }
//         // }
//         // console.log (users);
        
// // let ask = prompt ("Add a new user");

// // –î–∞–ª—å—à–µ –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞, –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
// if (!users.includes(ask)) {
//   users.push(ask);
// }


// // –£–¥–∞–ª–∏–º —é–∑–µ—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É userIndex
// users.splice(userIndex,1);
// console.log(users);


// // –û–±–Ω–æ–≤–∏–º —é–∑–µ—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
// users[1] = 'Max';
// console.log(users);


// // –î–∞–ª—å—à–µ –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—à–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getUserID(id),
// // addUser('string'), deleteUser(id), updateUser(id)
// function getUserID(name) {
//   let userIndex = '';
//   for(let input of users) {
//     if (input === name) {
//       userIndex = users.indexOf(input);
//     }

//   }
//   if (userIndex !== '') {
//     return userIndex;
//   } else {
//     alert('user is not finded');
//   }
//   console.log(userIndex);
// }


// console.log(getUserID('aabbbba')); // –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç "user is not defined"

// // –≤–≤–æ–¥–∏–º –Ω–æ–≤—ñ–µ –∏–º–µ–Ω–∞ —Å –ø–æ–º–æ—â—é –º–∞—Å—Å–≤–∞
// const addUser = function(arr, name) {
//   if (arr.includes(name)) {
//     alert('user has already exist');
// } else {arr.push(name);
// }
// }
// addUser(users, 'Ajax');
// addUser(users, 'Pablo');
// console.log(users);

// // -------------------------–£–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ —Ñ—É–Ω–∫—É–∏–µ–π ----------------------------------------
// const delateUser =(userIndex) => {
//   users.splice(userIndex,1)
// }
// delateUser(2);
// console.log(users);
// // --------------------------------
// delateUser(getUserID('Max'));
// console.log(users);

// const updateUser = function (index, name, arr) {
//   arr[index]=name;
//   return arr;
// }
// console.log(updateUser(getUserID('aaa'),'Max',users));


// -----------------–Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ —á—Ä–∞–≤–Ω–∏–≤–∞—è —Å id  –≤ –æ–±—ä–µ–∫—Ç–µ-------------------------------------------------------------------
// const users = [
//   {id: 'user_id_111', name: 'Greengo'},
//   {id: 'user_id_222', name: 'Riki'},
//   {id: 'user_id_333', name: 'Floyd'},
//   {id: 'user_id_444', name: 'Marchellos'},
// ];

// function getUserID(id) {
//   let userIndex = '';
//   for(let input of users) {
//     if (input.id === id) {
//       userIndex = users.indexOf(input);
//     }

//   }
//   if (userIndex !== '') {
//     return userIndex;
//   } else {
//     alert('user is not finded');
//   }
//   console.log(userIndex);
// }


// console.log (getUserID('user_id_222'));

// // -----------------------------------------------------------------------------

// const updateUser = function (index, name, arr) {
//   arr[index].name = name;
//   return arr[index];
//   }

//   const update = updateUser(getUserID('user_id_222'),'Max', users);
//   console.log(update);

// const getAllUsers = function(arr) {
//   for(const el of arr) {
//     console.log(`id: ${el.id} name: ${el.name}`);
//   }
// }
// getAllUsers(users);

const Student = function(bame, birthday, slogan) {
    this.name =name;
    this.birthday =birthday;
    this.slogan = slogan;
    this.getSlogan = function(){
        alert(`${this.slogan}`);
    }
};
const newStuden = new Student('Ben', '2.08.2019', 'Dont warry, be happy!');

console.log(newStuden); //–≤—ã–≤–æ–¥–∏—Ç –Ω–∞—à –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
console.log(newStuden.name); // –≤—ã–≤–æ–¥–∏—Ç name —Å—Ç—É–¥–µ–Ω—Ç–∞.
newStuden.getSlogan();//–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞. –≤–µ—Ä–Ω—ë—Ç alert —Å –¥–µ–≤–∏–∑–æ–º =)

// -------------------------------------------------------------------------
// ---------------–î–æ–º–∞—à–∫–∞ 4 –º–æ–¥—É–ª—å-------------------------------
/*
  –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∫–∞—Å—Å–∏—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –¥–µ–Ω—å–≥–∏, 
  –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç 
  –¥–µ–Ω–µ–≥ –∏–ª–∏ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
*/

/* –ï—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è-—Ç–æ–≤–∞—Ä–∞":"—Ü–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É" */ 
const products = {
    bread: 10,
    milk: 15,
    apples: 20,
    chicken: 50,
    cheese: 40,
  };
  
  /* 
    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Cashier.
    
    –ü–æ–ª—è –±—É–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–∞—Å—Å–∏—Ä–∞ (üîî –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –∫–∞–∫ this.–∏–º—è_–ø–æ–ª—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ): 
      - name - —Å—Ç—Ä–æ–∫–∞, –∏–º—è –∫–∞—Å—Å–∏—Ä–∞, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
      
      - productDatabase - –æ–±—ä–µ–∫—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
      
      - customerMoney - —á–∏—Å–ª–æ, —Å—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–Ω–µ–≥, –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 
      
      - getCustomerMoney(value) - –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ, –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –ø–æ–ª–µ customerMoney.
      
      - countTotalPrice(order) - –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–ø–∏—Å–æ–∫–∞ –ø–æ–∫—É–ø–æ–∫, —Å—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫.
        üîî –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ order –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ productDatabase. –ò–∑ order –±–µ—Ä–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ç–∞,
           –∞ –∏–∑ productDatbase —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É –∏ —É–º–Ω–æ–∂–∞–µ–º, —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ.
           –ß—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª, –ø–µ—Ä–µ–±—Ä–∞–≤ –≤—Å–µ –∫–ª—é—á–∏ order.
       
      - countChange(totalPrice) - –º–µ—Ç–æ–¥, —Å—á–∏—Ç–∞–µ—Ç —Å–¥–∞—á—É, —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—â–µ–π —Å—É–º–º–æ–π –ø–æ–∫—É–ø–æ–∫ –∏ –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
          * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ customerMoney –Ω–µ –º–µ–Ω—å—à–µ —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ totalPrice
          * –ï—Å–ª–∏ –¥–µ–Ω–µ–≥ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –¥–µ–Ω–µ–≥.
          * –ï—Å–ª–∏ –≤ customerMoney –º–µ–Ω—å—à–µ –¥–µ–Ω–µ–≥ —á–µ–º –≤ totalPrice, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null 
          
      - onSuccess(change) - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ ${change}!`.
      
      - onError() - –º–µ—Ç–æ–¥, –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É '–û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏'   
      
      - reset() - –º–µ—Ç–æ–¥, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª–µ customerMoney 0.
  */
  
  function Cashier(name, productDatabase) {
    // üîî –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ this –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –∏ –º–µ—Ç–æ–¥–∞–º –±—É–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
  }
  
  /* –ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. "–∏–º—è-–ø—Ä–æ–¥—É–∫—Ç–∞":"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ-–µ–¥–∏–Ω–∏—Ü" */
  const order = {
    bread: 2,
    milk: 2,
    apples: 1,
    cheese: 1
  };
  
  /* –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è */
  const mango = new Cashier('Mango', products);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
  console.log(mango.name); // Mango
  console.log(mango.productDatabase); // —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–±—ä–µ–∫—Ç products)
  console.log(mango.customerMoney); // 0
  
  // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ countTotalPrice –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
  // –ø–µ—Ä–µ–¥–∞–≤–∞—è order - —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const totalPrice = mango.countTotalPrice(order);
  
  // –ü—Ä–æ–≤–µ—Ä—è–º —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–ª–∏
  console.log(totalPrice); // 110
  
  // –í—ã–∑—ã–≤–∞–µ–º getCustomerMoney –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–µ–Ω–µ–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  mango.getCustomerMoney(300);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –ø–æ–ª–µ —Å –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log(mango.customerMoney); // 300
  
  // –í—ã–∑—ã–≤–∞–µ–º countChange –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–¥–∞—á–∏
  const change = mango.countChange();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–º –≤–µ—Ä–Ω—É–ª countChange
  console.log(change); // 190
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –¥–µ–Ω–µ–≥
  if(change !== null) {
     // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onSuccess
    mango.onSuccess(change); // –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –≤–∞—à–∞ —Å–¥–∞—á–∞ 190
  } else {
    // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ onError   
    mango.onError(); // –û—á–µ–Ω—å –∂–∞–ª—å, –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫–∏
  }
  
  // –í—ã–∑—ã–≤–∞–µ–º reset –ø—Ä–∏ –ª—é–±–æ–º –∏—Å—Ö–æ–¥–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
  mango.reset();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ reset
  console.log(mango.customerMoney); // 0


/* –ï—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∏–º—è-—Ç–æ–≤–∞—Ä–∞":"—Ü–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É" */ 

  const products = {
    bread: 10,
    milk: 15,
    apples: 20,
    chicken: 50,
    cheese: 40,
  };

  const Cashier = function (name, productDatabase, ) {
    this.name = name;
    this.productDatabas = productDatabase;
    this.customerMoney = 0;
        this.getCustomerMoney = 
        function(value) {
            this.customerMoney = Number(value('–û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä'));  
        }
        this.countTotalPrice = function(order) {products, totalvalue, 


        }


  }



  const Manager = function(name = "manager", sales = 0) {
    this.name = name;
    this.sales = sales;
    this.sell = function(product) {
      this.sales += 1;
      return `Manager ${this.name} sold ${product}.`;
    };
  };
  
  const mango = new Manager('Mango', 5);
  console.log(mango.sales); // 5
  console.log(mango.sell('TV')); // Manager Mango sold TV
  console.log(mango.sell('Microwave'));  // Manager Mango sold Microwave
  console.log(mango.sales); // 7
  
  const poly = new Manager('Poly', 10);
  console.log(poly.sales); // 10
  console.log(poly.sell('TV')); // Manager Poly sold TV
  console.log(poly.sell('Microwave'));  // Manager Poly sold Microwave
  console.log(poly.sales); // 12



  - name - —Å—Ç—Ä–æ–∫–∞, –∏–º—è –∫–∞—Å—Å–∏—Ä–∞, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
      
      - productDatabase - –æ–±—ä–µ–∫—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
      
      - customerMoney - —á–∏—Å–ª–æ, —Å—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–Ω–µ–≥, –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 
      
      - getCustomerMoney(value) - –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ, –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –ø–æ–ª–µ customerMoney.
      
      - countTotalPrice(order) - –º–µ—Ç–æ–¥, –ø–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–ø–∏—Å–æ–∫–∞ –ø–æ–∫—É–ø–æ–∫, —Å—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫.
        üîî –ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ order –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ productDatabase. –ò–∑ order –±–µ—Ä–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ç–∞,
           –∞ –∏–∑ productDatbase —Ü–µ–Ω—É –∑–∞ –æ–¥–Ω—É —à—Ç—É–∫—É –∏ —É–º–Ω–æ–∂–∞–µ–º, —Ç–∞–∫ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ.
           –ß—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª, –ø–µ—Ä–µ–±—Ä–∞–≤ –≤—Å–µ –∫–ª—é—á–∏ order.
       
      - countChange(totalPrice)